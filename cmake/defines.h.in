// Copyright 2021-2022 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#include <stdint.h>
#include <assert.h>

#define __LOGY__

#define LOGY_VERSION_MAJOR @logy_VERSION_MAJOR@
#define LOGY_VERSION_MINOR @logy_VERSION_MINOR@
#define LOGY_VERSION_PATCH @logy_VERSION_PATCH@

/*
 * LOGY results.
 */
typedef enum LogyResult_T
{
	SUCCESS_LOGY_RESULT = 0,
	FAILED_TO_ALLOCATE_LOGY_RESULT = 1,
	FAILED_TO_OPEN_FILE_LOGY_RESULT = 2,
	FAILED_TO_GET_DIRECTORY_LOGY_RESULT = 3,
	LOGY_RESULT_COUNT = 4,
} LogyResult_T;
/*
 * LOGY result type.
 */
typedef uint8_t LogyResult;

/*
 * Log levels.
 */
typedef enum LogLevel_T
{
	OFF_LOG_LEVEL = 0,
	FATAL_LOG_LEVEL = 1,
	ERROR_LOG_LEVEL = 2,
	WARN_LOG_LEVEL = 3,
	INFO_LOG_LEVEL = 4,
	DEBUG_LOG_LEVEL = 5,
	TRACE_LOG_LEVEL = 6,
	ALL_LOG_LEVEL = 7,
	LOG_LEVEL_COUNT = 8,
} LogLevel_T;
/*
 * Log level type.
 */
typedef uint8_t LogLevel;

/*
 * LOGY result strings.
 */
static const char* const logyResultStrings[LOGY_RESULT_COUNT] = {
	"Success",
	"Failed to allocate",
	"Failed to open file",
	"Failed to get directory",
};

/*
 * Returns LOGY result as string.
 * result - LOGY result.
 */
inline static const char* logyResultToString(
	LogyResult result)
{
	if (result >= LOGY_RESULT_COUNT)
		return "Unknown LOGY result";
	return logyResultStrings[result];
}

/*
 * Log level strings.
 */
static const char* const logLevelStrings[LOG_LEVEL_COUNT] = {
	"OFF", "FATAL", "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "ALL",
};

/*
 * Returns log level as string.
 * level - log level.
 */
inline static const char* logLevelToString(
	LogLevel level)
{
	if (level >= LOG_LEVEL_COUNT)
		return "UNKNOWN";
	return logLevelStrings[level];
}
