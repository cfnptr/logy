// Copyright 2021-2024 Nikita Fediuchin. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/***********************************************************************************************************************
 * @file
 * @brief Message logger.
 * 
 * @details
 * The logger is used to record or log messages generated by a software application during its execution. 
 * Logging is a crucial aspect of software development, as it provides a way to capture information about the 
 * program's behavior, errors, warnings, and other events. The primary purposes of using a logger in 
 * programming include debugging, monitoring, and analyzing the application's runtime behavior.
 **********************************************************************************************************************/

#pragma once
#include "logy/common.h"

#include <stdarg.h>
#include <stdbool.h>

/**
 * @brief Log file name without rotation.
 */
#define SOLO_LOG_FILE_NAME "log.txt"

/**
 * @brief Logger structure.
 */
typedef struct Logger_T Logger_T;
/**
 * @brief Logger instance.
 */
typedef Logger_T* Logger;

/**
 * @brief Creates a new logger instance.
 * 
 * @details
 * Opens a new file stream to write logging messages. Log rotation is a process used to manage log files 
 * by periodically archiving them to prevent from becoming too large and consuming excessive disk space. 
 * 
 * @note You should destroy created logger instance manually.
 *
 * @param[in] directoryPath logs directory path string
 * @param level logging level, inclusive
 * @param logToStdout duplicate messages to the stdout
 * @param rotationTime log rotation delay time or 0 (in seconds)
 * @param isAppDataDirectory write to app data directory
 * @param[out] logger pointer to the logger instance
 * 
 * @return The @ref LogyResult code and writes logger instance on success.
 * 
 * @retval SUCCESS_LOGY_RESULT on success
 * @retval FAILED_TO_ALLOCATE_LOGY_RESULT if out of memory
 * @retval FAILED_TO_GET_DIRECTORY_LOGY_RESULT if failed to get data directory path
 * @retval FAILED_TO_OPEN_FILE_LOGY_RESULT if failed to open file
 */
LogyResult createLogger(const char* directoryPath, LogLevel level,
	bool logToStdout, double rotationTime, bool isAppDataDirectory, Logger* logger);

/**
 * @brief Destroys logger instance.
 * @param logger logger instance or NULL
 */
void destroyLogger(Logger logger);

/**
 * @brief Returns logger directory path string. (MT-Safe)
 * @param logger logger instance
 */
const char* getLoggerDirectoryPath(Logger logger);

/**
 * @brief Returns logger file path string. (MT-Safe)
 * @param logger logger instance
 */
const char* getLoggerFilePath(Logger logger);

/**
 * @brief Returns current logger rotation delay time in seconds. (MT-Safe)
 * 
 * @details
 * After the time expires, the current log file will be closed and 
 * compressed, a new file stream for the log file will be created.
 * 
 * @param logger logger instance
 */
double getLoggerRotationTime(Logger logger);

/**
 * @brief Returns current logger logging level. (MT-Safe)
 * @param logger logger instance
 */
LogLevel getLoggerLevel(Logger logger);

/**
 * @brief Set logger logging level. (MT-Safe)
 * @details Log only message <= log level.
 *
 * @param logger logger instance
 * @param level message logging level
 */
void setLoggerLevel(Logger logger, LogLevel level);

/**
 * @brief Returns current logger log to stdout state. (MT-Safe)
 * @param logger logger instance
 */
bool getLoggerLogToStdout(Logger logger);

/**
 * @brief Sets log messages to stdout. (MT-Safe)
 * @details Is logger should duplicate messages to the stdout.
 *
 * @param logger logger instance
 * @param logToStdout logToStdout value
 */
void setLoggerLogToStdout(Logger logger, bool logToStdout);

/**
 * @brief Logs message to the log. (MT-Safe)
 *
 * @param logger logger instance
 * @param level message logging level
 * @param[in] fmt formatted message
 * @param args message arguments
 */
void logVaMessage(Logger logger, LogLevel level, const char* fmt, va_list args);

/**
 * @brief Logs message to the log. (MT-Safe)
 *
 * @param logger logger instance
 * @param level message logging level
 * @param[in] fmt formatted message
 * @param ... message arguments
 */
void logMessage(Logger logger, LogLevel level, const char* fmt, ...);